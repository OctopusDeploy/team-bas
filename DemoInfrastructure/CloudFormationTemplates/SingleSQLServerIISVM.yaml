AWSTemplateFormatVersion: 2010-09-09
Parameters:
  InstanceTypeParameter:
    Type: String
    Default: #{Project.AWS.InstanceType}
    Description: Enter instance size. Default is m3.medium.
  AMI:
    Type: String
    Default: #{Project.AWS.AMImage}
    Description: AMI Image
  SubnetIdParameter:
    Type: String
    Default: #{AWS.SubnetId}
  SecurityGroupIdParameter:
    Type: String
    MinLength: "1"
    Default: #{AWS.SecurityGroupId}
  IAMInstanceProfileParameter:
    Type: String
    Default: #{AWS.IAMProfileName}
  VPCParameter:
    Type: String
    Default: #{AWS.VPCSecurityGroupId}
Resources:
  #{Project.AWS.InstanceName}:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AMI
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
           - 
              !Ref SecurityGroupIdParameter
          SubnetId: !Ref SubnetIdParameter
      InstanceType: 
        Ref: InstanceTypeParameter
      KeyName: #{AWS.SecurityKeyName}
      IamInstanceProfile: !Ref IAMInstanceProfileParameter
      Tags:
        -
          Key: Name
          Value: #{Project.AWS.InstanceName}
      UserData:
        Fn::Base64: !Join
          - ''
          -
            - |-
              <powershell>
              Start-Transcript -path "C:\Bootstrap.txt" -append                            
             
              Write-Output "Open port 8088 on Windows Firewall" 
              & netsh.exe firewall add portopening TCP 8088 "Trading Website" 
 
              $tentacleDownloadPath = "https://octopus.com/downloads/latest/WindowsX64/OctopusTentacle" 
              $octopusServerUrl = "#{Global.Octopus.Url}" 
              $octopusApiKey = "#{Global.Octopus.ApiKey}" 
              $octopusServerThumbprint = "#{Global.Octopus.ServerThumbprint}" 
              $applicationName = "#{Project.Application.Name}"
              $environments = "#{Project.Environments.List}"
              $roles = "#{Project.Features.List}"
              $tentacleListenPort = 10933 
              $tentacleHomeDirectory = "C:\Octopus" 
              $tentacleAppDirectory = "C:\Octopus\Applications" 
              $tentacleConfigFile = "C:\Octopus\Tentacle\Tentacle.config"			  
 
              $tentaclePath = "C:\Tools\Octopus.Tentacle.msi" 
 
              function Get-MyPublicIPAddress { 
                  # Get Ip Address of Machine 
                  Write-Host "Getting public IP address" 
                  $ipAddress = Invoke-RestMethod http://ipinfo.io/json | Select-Object -exp ip 
                  return $ipAddress 
              } 
 
              function Get-FileFromServer 
              { 
                param ( 
                  [string]$url, 
                  [string]$saveAs 
                ) 
 
                Write-Host "Downloading $url to $saveAs" 
                [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 
                $downloader = new-object System.Net.WebClient 
                $downloader.DownloadFile($url, $saveAs) 
              } 
 
                Write-Output "Beginning Tentacle installation" 

                Write-Output "Downloading latest Octopus Tentacle MSI..." 

                $tentaclePath = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath(".\Tentacle.msi") 
                if ((test-path $tentaclePath) -ne $true) { 
                  Get-FileFromServer $tentacleDownloadPath $tentaclePath 
                } 

                Write-Output "Installing MSI" 
                $msiExitCode = (Start-Process -FilePath "msiexec.exe" -ArgumentList "/i Tentacle.msi /quiet" -Wait -Passthru).ExitCode 
                Write-Output "Tentacle MSI installer returned exit code $msiExitCode" 
                if ($msiExitCode -ne 0) { 
                  throw "Installation aborted" 
                } 

                Write-Output "Open port $tentacleListenPort on Windows Firewall" 
                & netsh.exe firewall add portopening TCP $tentacleListenPort "Octopus Tentacle" 
                if ($lastExitCode -ne 0) { 
                  throw "Installation failed when modifying firewall rules" 
                } 

                $ipAddress = Get-MyPublicIPAddress 
                $ipAddress = $ipAddress.Trim() 
                $computerName = "#{Project.AWS.InstanceName}"

                Write-Output "Public IP address: " + $ipAddress 

                Write-Output "Configuring and registering Tentacle" 
                Set-Location "${env:ProgramFiles}\Octopus Deploy\Tentacle" 
                $registerComputerName = "$computerName-Bootstrap-01"
                $bootstrapRoleName = "$applicationName-Bootstrap"
                
                $rolesToRegister = $roles -split "," | foreach { "--role `"Bootstrap-$($_.Trim())`"" }
                $rolesToRegister = $rolesToRegister -join " "
                $environmentsToRegister = $environments -split "," | foreach { "--environment `"$($_.Trim())`"" }
                $environments = $environments -join " "
                
                $slackBody = @{
                    "channel" = "#demo-env-pulse"
                    "username" = "Cloud Formation PowerShell Bootstrap"
                    "text" = ":woohoo: Installation of bootstrap tentacle on $registerComputerName was successful"
                }
                
                & .\tentacle.exe create-instance --instance "Tentacle" --config $tentacleConfigFile --console | Write-Output
                if ($lastExitCode -ne 0) { 
                 $slackBody["text"] = ":sadpanda: \<!channel\> Installation failed on create-instance for $registerComputerName."
                 Invoke-WebRequest -Method POST -Uri https://hooks.slack.com/services/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 -Body (ConvertTo-Json -Compress -InputObject $slackBody)
                 throw "Installation failed on create-instance" 
                } 
                & .\tentacle.exe configure --instance "Tentacle" --home $tentacleHomeDirectory --console | Write-Output
                if ($lastExitCode -ne 0) { 
                  $slackBody["text"] = ":sadpanda: \<!channel\> Installation failed on configure home directory for $registerComputerName."
                  Invoke-WebRequest -Method POST -Uri https://hooks.slack.com/services/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 -Body (ConvertTo-Json -Compress -InputObject $slackBody)
                  throw "Installation failed on configure" 
                } 
                & .\tentacle.exe configure --instance "Tentacle" --app $tentacleAppDirectory --console | Write-Output
                if ($lastExitCode -ne 0) { 
                  $slackBody["text"] = ":sadpanda: \<!channel\> Installation failed on configure app directory for $registerComputerName."
                  Invoke-WebRequest -Method POST -Uri https://hooks.slack.com/services/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 -Body (ConvertTo-Json -Compress -InputObject $slackBody)
                  throw "Installation failed on configure" 
                } 
                & .\tentacle.exe configure --instance "Tentacle" --port $tentacleListenPort --console | Write-Output
                if ($lastExitCode -ne 0) { 
                  $slackBody["text"] = ":sadpanda: \<!channel\> Installation failed on configure listen port for $registerComputerName."
                  Invoke-WebRequest -Method POST -Uri https://hooks.slack.com/services/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 -Body (ConvertTo-Json -Compress -InputObject $slackBody)
                  throw "Installation failed on configure" 
                } 
                & .\tentacle.exe new-certificate --instance "Tentacle" --console | Write-Output
                if ($lastExitCode -ne 0) { 
                  $slackBody["text"] = ":sadpanda: \<!channel\> Installation failed on creating new certificate for $registerComputerName."
                  Invoke-WebRequest -Method POST -Uri https://hooks.slack.com/services/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 -Body (ConvertTo-Json -Compress -InputObject $slackBody)
                  throw "Installation failed on creating new certificate" 
                } 
                & .\tentacle.exe configure --instance "Tentacle" --trust $octopusServerThumbprint --console | Write-Output
                if ($lastExitCode -ne 0) { 
                  $slackBody["text"] = ":sadpanda: \<!channel\> Installation failed on configuring octopus server thumbprint for $registerComputerName."
                  Invoke-WebRequest -Method POST -Uri https://hooks.slack.com/services/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 -Body (ConvertTo-Json -Compress -InputObject $slackBody)
                  throw "Installation failed on configure" 
                } 	                  
                
                & .\tentacle.exe service --instance "Tentacle" --install --start --console | Write-Output
                if ($lastExitCode -ne 0) { 
                   $slackBody["text"] = ":sadpanda: \<!channel\> Installation failed on install for $registerComputerName."
                   Invoke-WebRequest -Method POST -Uri https://hooks.slack.com/services/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 -Body (ConvertTo-Json -Compress -InputObject $slackBody)
                  throw "Installation failed on service install" 
                } 

                Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
                
                Write-Host "Installing SQL Server Express Warning, this may restart the box"
                $slackBody["text"] = "Installing SQL Server Express on $registerComputerName"
                Invoke-WebRequest -Method POST -Uri https://hooks.slack.com/services/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 -Body (ConvertTo-Json -Compress -InputObject $slackBody)
                choco install sql-server-express -y                
                
                $cmd = "& .\tentacle.exe register-with --instance `"Tentacle`" --server $octopusServerUrl $rolesToRegister --role $bootstrapRoleName --role $applicationName --environment `"SpinUp`" --environment `"TearDown`" $environmentsToRegister --name $registerComputerName --publicHostName $ipAddress --apiKey $octopusApiKey --comms-style TentaclePassive --force --console"
                Invoke-Expression $cmd | Write-Host
                if ($lastExitCode -ne 0) { 
                  $slackBody["text"] = ":sadpanda: \<!channel\> Installation failed on registering $registerComputerName with $octopusServerUrl."
                  Invoke-WebRequest -Method POST -Uri https://hooks.slack.com/services/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 -Body (ConvertTo-Json -Compress -InputObject $slackBody)
                  throw "Installation failed on register-with" 
                } 	

                $octopusAdminDatabaseUser = "#{Global.Database.AdminUser}"
                $octopusAdminDatabasePassword = "#{Global.Database.AdminPassword}"
                $octopusAdminDatabaseServer = "#{Global.Database.Server}"

                $connectionString = "Server=$octopusAdminDatabaseServer;Database=master;integrated security=true;"

                $sqlConnection = New-Object System.Data.SqlClient.SqlConnection
                $sqlConnection.ConnectionString = $connectionString

                $command = $sqlConnection.CreateCommand()
                $command.CommandType = [System.Data.CommandType]'Text'

                Write-Output "Opening the connection to $octopusAdminDatabaseServer"
                $sqlConnection.Open()

                Write-Output "Running the if not exists then create user command on the server"
                $command.CommandText = "CREATE LOGIN [$octopusAdminDatabaseUser] with Password='$octopusAdminDatabasePassword', default_database=master"            
                $command.ExecuteNonQuery()

                Write-Output "Granting the sysadmin role to $octopusAdminDatabaseUser"
                $command.CommandText = "sp_addsrvrolemember @loginame= '$octopusAdminDatabaseUser', @rolename = 'sysadmin'"  
                $command.ExecuteNonQuery()

                Write-Output "Successfully created the account $octopusAdminDatabaseUser"
                Write-Output "Closing the connection to $octopusAdminDatabaseServer"
                $sqlConnection.Close()

                $sqlRegistryPath = "HKLM:\Software\Microsoft\Microsoft SQL Server\MSSQL14.SQLEXPRESS\MSSQLServer"
                $sqlRegistryLoginName = "LoginMode"

                $sqlRegistryLoginValue = "2"

                New-ItemProperty -Path $sqlRegistryPath -Name $sqlRegistryLoginName -Value $sqlRegistryLoginValue -PropertyType DWORD -Force

                Write-Host "Restarting SQL Server"
                net stop MSSQL`$SQLEXPRESS /y
                net start MSSQL`$SQLEXPRESS
                
                Write-Host "Installing SQL Management Studio"
                $slackBody["text"] = "Installing SSMS on $registerComputerName"
                Invoke-WebRequest -Method POST -Uri https://hooks.slack.com/services/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 -Body (ConvertTo-Json -Compress -InputObject $slackBody)
                choco install sql-server-management-studio -y
                
                $slackBody["text"] = ":woohoo: Installation of bootstrap tentacle on $registerComputerName was successful."
                Invoke-WebRequest -Method POST -Uri https://hooks.slack.com/services/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 -Body (ConvertTo-Json -Compress -InputObject $slackBody)
                Write-Output "Tentacle commands complete"             
              
              </powershell>